using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;

namespace DSources.Data
{
    [SerializableAttribute]
    public class Column : ICloneable
    {
        private List<Cell> cells;

        public enum ObjectsType { Text, Number, Object, Date }
        public enum Role { Fact, Dimension }

        [DefaultValue(Role.Fact)]
        public virtual Column.Role RoleOfColumn { get; private set; }

        [DefaultValue(ObjectsType.Text)]
        public virtual Column.ObjectsType ObjectsTypeInColumn { get; private set; }

        [DefaultValue("")]
        public virtual String Name { get; private set; }

        public virtual int CellsCount { get { return cells.Count; } }

        public Column() { }

        public Column(List<Cell> cells, String name, ObjectsType type, Role role)
        {
            if (cells == null || name==null) throw new NullReferenceException();
            this.cells = cells;
            Name = name;
            ObjectsTypeInColumn = type;
            RoleOfColumn = role;
        }

        public virtual void AddCellsAtIndex(int Index, IList<Cell> Cells)
        {
            cells.InsertRange(Index, Cells);
        }

        public virtual void AddCellAtIndex(int Index, Cell Cell)
        {
            cells.Insert(Index, Cell);
        }

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            Column another = (Column)obj;
            if (another == null) { return false; }
            if (!another.RoleOfColumn.Equals(this.RoleOfColumn)) { return false; }
            if (!another.ObjectsTypeInColumn.Equals(this.ObjectsTypeInColumn)) { return false; }
            if (!another.cells.SequenceEqual(this.cells)) { Console.WriteLine("diffrent cells"); return false; }
            Console.WriteLine(another);
            return true;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public IEnumerator<Cell> CellsIterator()
        {
            foreach (Cell c in cells)
            {
                yield return c;
            }
        }

        public Column CloneColumn()
        {
            using (var ms = new MemoryStream())
            {
                var formatter = new BinaryFormatter();
                formatter.Serialize(ms, this);
                ms.Position = 0;
                return (Column)formatter.Deserialize(ms);
            }
        }

        public object Clone()
        {
            return CloneColumn();
        }


        public Cell CellAt(int Index)
        {
            return cells.ElementAt(Index);
        }

        public void Replace(int p1, int p2)
        {
            if (p2 < p1)
            {
                int p = p1;
                p1 = p2;
                p2 = p;
            }
                        
            Cell c1 = cells.ElementAt(p1);
            Cell c2 = cells.ElementAt(p2);
            cells.RemoveAt(p2);
            cells.RemoveAt(p1);
            cells.Insert(p1, c2);
            cells.Insert(p2, c1);            
        }

        public virtual void RemoveCellAtIndex(int Index)
        {
            cells.RemoveAt(Index);
        }
    }
}
