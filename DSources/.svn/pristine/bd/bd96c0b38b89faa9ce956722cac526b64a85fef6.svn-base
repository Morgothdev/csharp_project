using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DSources.Data
{
    public interface CellsIterator
    {
        bool HasNextInColumn();
        bool HasNextInRow();
        bool HasPreviousInRow();
        bool HasPreviousInColumn();

        Cell NextInRow();
        Cell NextInColumn();
        Cell PreviousInRow();
        Cell PreviousInColumn();

        int ActualIndexInRow();
        int ActualIndexInColumn();
    }

    internal interface CellsIteratorEdit : CellsIterator
    {
        void InsertColumnInModel(Column Column);
        void InsertCellINColumn(Cell Cell);
        void RemoveColumn();
        void RemoveCell();
    }

    internal class CellsIteratorImpl : CellsIteratorEdit
    {
        private DataModel _data;
        private int _columnPosition = -1, _rowPosition = -1;
        
        internal void SetDataModel(DataModel Data){
            _data =Data;
        }
        
        public bool HasNextInColumn()
        {
            return _columnPosition < _data.GetColumnsCount();
        }

        public bool HasNextInRow()
        {
            return _rowPosition < _data.GetColumnAt(_columnPosition).CellsCount;
        }

        public bool HasPreviousInRow()
        {
            return _rowPosition > 0;
        }

        public bool HasPreviousInColumn()
        {
            return _columnPosition > 0;
        }

        //-----------------------------------------------------------------------

        public Cell NextInRow()
        {
            throw new NotImplementedException();
        }

        public Cell NextInColumn()
        {
            throw new NotImplementedException();
        }

        public Cell PreviousInRow()
        {
            throw new NotImplementedException();
        }

        public Cell PreviousInColumn()
        {
            throw new NotImplementedException();
        }

        //-----------------------------------------------------------------------

        public int ActualIndexInRow()
        {
            return _rowPosition;
        }

        public int ActualIndexInColumn()
        {
            return _columnPosition;
        }

        //-----------------------------------------------------------------------

        public void InsertColumnInModel(Column Column)
        {
            throw new NotImplementedException();
        }

        public void InsertCellINColumn(Cell Cell)
        {
            throw new NotImplementedException();
        }

        //-----------------------------------------------------------------------

        public void RemoveColumn()
        {
            throw new NotImplementedException();
        }

        public void RemoveCell()
        {
            throw new NotImplementedException();
        }
    }

    class StubCellsIterator : CellsIterator
    {
        public bool HasNextInColumn()
        {
            return false;
        }

        public bool HasNextInRow()
        {
            return false;
        }

        public bool HasPreviousInRow()
        {
            return false;
        }

        public bool HasPreviousInColumn()
        {
            return false;
        }


        public Cell NextInRow()
        {
            throw new NotImplementedException();
        }

        public Cell NextInColumn()
        {
            throw new NotImplementedException();
        }

        public Cell PreviousInRow()
        {
            throw new NotImplementedException();
        }

        public Cell PreviousInColumn()
        {
            throw new NotImplementedException();
        }


        public int ActualIndexInRow()
        {
            throw new NotImplementedException();
        }

        public int ActualIndexInColumn()
        {
            throw new NotImplementedException();
        }
    }
}
