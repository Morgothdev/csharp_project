using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NMock2;
using System.Collections.Generic;

namespace DSources.Data
{
    [TestClass]
    public class ColumnTest
    {
        Mockery mockery;


        [TestInitialize]
        public void SetUp(){
            mockery = new Mockery();
        }

        [TestCleanup]
        public void CleanUp(){
            mockery.VerifyAllExpectationsHaveBeenMet();
        }

        
        Cell CreateMockedCell(object value){
            Cell result = (Cell)mockery.NewMock(typeof(Cell));
            Expect.AtMost(10000).On(result).GetProperty("Value").Will(Return.Value(value));
            return result;
        }




        [TestMethod]
        [TestCategory("Column")]
        [TestCategory("Not implemented")]
        public void TestEqualsColumns()
        {
            Column.ObjectsType type = Column.ObjectsType.Number;
            Column.Role role = Column.Role.Dimension;
            Object o1 = 45;
            Object o2 = 20;
            Cell c1 = CreateMockedCell(o1);
            Cell c2 = CreateMockedCell(o2);
            List<Cell> cells1 = new List<Cell>();
            List<Cell> cells2 = new List<Cell>();
            cells1.Add(c1);
            cells1.Add(c2);
            cells2.Add(c1);
            cells2.Add(c2);
            Column col1 = new Column(cells1,type,role);
            Column col2 = new Column(cells2,type,role);

            Assert.AreEqual(col1, col2);
            Assert.AreNotSame(col1, col2);
        }


        [TestMethod]
        [TestCategory("Column")]
        [TestCategory("Not implemented")]
        public void TestCloningColumns()
        {
            //IList<Cell> cellsList = new List<Cell>();
            //IList<Cell> cellsList2 = new List<Cell>();

            //Cell c1 = CreateMockedCell(40);
            //cellsList.Add();
            //cellsList2.Add
            //cellsList.Add(CreateMockedCell(41));
            //cellsList.Add(CreateMockedCell(254));

            //Column tested = new Column(cellsList);

            //IEnumerator<Cell> iterator = tested.CellsIterator();
            //while (iterator.MoveNext())
            //{
            //    cellsList.
            //}
            



            Assert.Inconclusive("Not implemented");
        }

        [TestMethod]
        [TestCategory("Column")]
        [TestCategory("Not implemented")]
        public void TestColumnsIteratorNotNull()
        {
            Assert.Inconclusive("Not implemented");
        }

        [TestMethod]
        [TestCategory("Column")]
        [TestCategory("Not implemented")]
        public void TestColumnsConstructorSettingAllProperies()
        {
            Assert.Inconclusive("Not implemented");
        }
    }
}
