using DSources.Parsers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DSources.Logic
{
    public class ParsersManager
    {
        private static ParsersManager _instance = new ParsersManager();
        private List<ParserInfo> parsersInfo = new List<ParserInfo>();
        private IDictionary<String, Parser> parsers = new Dictionary<String, Parser>();

        private ParsersManager()
        {
            IsConfigured = false;
        }

        public void Configure()
        {
            ICollection<MyType> typesImplementing = new ClassesFilter().getAssembliesImplementInterface(typeof(Parser));
            ICollection<Parser> loadedParsers = new ParsersLoader().LoadParsers(typesImplementing);
            AcceptParsersCollection(loadedParsers);
            IsConfigured = true;
        }

        public static ParsersManager Instance { get { return _instance; } }
        public bool IsConfigured { get; set; }
        
        public void AcceptParsersCollection(ICollection<Parser> loadedParsers)
        {
            parsersInfo = new List<ParserInfo>();
            foreach (Parser parser in loadedParsers)
            {
                parsersInfo.Add(parser.Arguments);
                parsers.Add(parser.Arguments.ParserName, parser);
            }
        }

        public ICollection<ParserInfo> GetParsersInfo()
        {
            return parsersInfo;
        }

        public Parser GetParser(ParserConfiguration configuration)
        {
            if(configuration==null){
                return Parser.StubParser;
            }

            
            Parser result;
            if (configuration.GetParserName() == null)
            {
                return Parser.StubParser;
            }

            parsers.TryGetValue(configuration.GetParserName(), out result);
            if (result == null)
            {
                return Parser.StubParser;
            }
            result = result.ClonePrototype();
            result.ConfigureItSelf(configuration);
            return result;
        }

        public static ParsersManager Reset()
        {
            _instance = new ParsersManager();
            return Instance;
        }
    }
}
