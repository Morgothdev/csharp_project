using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;

namespace DSources.Data
{
    [SerializableAttribute]
    public class DataModel  : ICloneable
    {
        private List<Column> _columns = new List<Column>();

        public virtual int GetColumnsCount()
        {
            return _columns.Count;
        }

        public virtual void AddColumnsAtBegin(List<Column> Columns)
        {
            _columns.InsertRange(0, Columns);
        }

        public virtual Column GetColumnAt(int Index)
        {
            return _columns.ElementAt(Index);
        }

        public virtual void AddColumnsAtEnd(List<Column> Columns)
        {
            _columns.InsertRange(_columns.Count, Columns);
        }

        public virtual void AddColumnsInside(int Index, List<Column> Columns)
        {
            _columns.InsertRange(Index, Columns);
        }

        public virtual IEnumerator<Column> ColumnsIterator()
        {
            foreach (Column c in _columns)
            {
                yield return c;
            }
        }

        public virtual List<Column> Slice(int From, int To)
        {
            int IndexFrom = From;
            int IndexTo = (To>0)?To:(To<0)?_columns.Count+To:_columns.Count;
            int count = IndexTo-IndexFrom;
            if (count < 0) { count = 0; }
            return _columns.GetRange(IndexFrom, count);
        }

        public virtual List<Column> Slice(int Index)
        {
            if (Index < 0)
            {
                return Slice(0, -Index);
            }
            else
            {
                return Slice(Index, 0);
            }
        }

        public virtual CellsIterator CellsIterator()
        {
            return new StubCellsIterator();
        }

        public object Clone()
        {
            return CloneModel();
        }

        public DataModel CloneModel()
        {
            using (var ms = new MemoryStream())
            {
                var formatter = new BinaryFormatter();
                formatter.Serialize(ms, this);
                ms.Position = 0;
                return (DataModel)formatter.Deserialize(ms);
            }
        }

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            DataModel another = (DataModel)obj;
            if (another == null) { return false; }
            if (!another._columns.SequenceEqual(this._columns)) { return false; }
            return true;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

    }
}
