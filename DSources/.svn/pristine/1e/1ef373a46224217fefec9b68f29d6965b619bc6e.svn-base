using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

namespace DSources.Data
{
    public class NotInitializedException : Exception { }

    public interface CellsIterator
    {
        bool HasNextInColumn();
        bool HasNextInRow();
        bool HasPreviousInRow();
        bool HasPreviousInColumn();

        Cell NextInRow();
        Cell NextInColumn();
        Cell PreviousInRow();
        Cell PreviousInColumn();

        int ActualIndexInRow();
        int ActualIndexInColumn();
    }

    internal interface CellsIteratorEdit : CellsIterator
    {
        void InsertColumnInModel(Column Column);
        void InsertCellINColumn(Cell Cell);
        void RemoveColumn();
        void RemoveCell();
    }

    internal class CellsIteratorImpl : CellsIteratorEdit
    {
        private DataModel _data;
        private int _columnPosition = -1, _rowPosition = -1;
        [DefaultValue(false)]
        private bool _initialized { get; set; }

        internal void SetDataModel(DataModel Data)
        {
            _data = Data;
            _columnPosition = 0;
            _rowPosition = 0;
            _initialized = true;
        }



        public bool HasNextInColumn()
        {
            if (_initialized)
            {
                return (_columnPosition < _data.ColumnsCount) 
                    && (_rowPosition <_data.ColumnAt(_columnPosition).CellsCount);
            }
            else
            {
                throw new NotInitializedException();
            }
        }

        public bool HasNextInRow()
        {
            if (_initialized)
            {
                return _columnPosition < _data.ColumnsCount;
            }
            else
            {
                throw new NotInitializedException();
            }
        }

        public bool HasPreviousInRow()
        {
            if (_initialized)
            {
                return _columnPosition > 0;
            }
            else
            {
                throw new NotInitializedException();
            }
        }

        public bool HasPreviousInColumn()
        {
            if (_initialized)
            {
                return (_columnPosition > 0) &&
                    (_rowPosition > 0);
            }
            else
            {
                throw new NotInitializedException();
            }
        }

        //-----------------------------------------------------------------------

        public Cell NextInRow()
        {
            try { return _data.ColumnAt(_columnPosition).CellAt(_rowPosition); }
            finally { MoveToNextInColumn(); }
        }

        void MoveToNextInRow()
        {
            ++_columnPosition;
        }

        public Cell NextInColumn()
        {
            try { return _data.ColumnAt(_columnPosition).CellAt(_rowPosition); }
            finally { MoveToNextInColumn(); }
        }

        void MoveToNextInColumn()
        {
            ++_rowPosition;
        }

        public Cell PreviousInRow()
        {
            try { return _data.ColumnAt(_columnPosition-1).CellAt(_rowPosition); }
            finally { MoveToPreviousInRow(); }
        }

        void MoveToPreviousInRow()
        {
            --_columnPosition;
        }

        public Cell PreviousInColumn()
        {
            try { return _data.ColumnAt(_columnPosition).CellAt(_rowPosition - 1); }
            finally { MoveToPreviousInColumn(); }
        }

        void MoveToPreviousInColumn(){
            --_rowPosition;
        }

        //-----------------------------------------------------------------------

        public int ActualIndexInRow()
        {
            if (_initialized)
            {
                return _rowPosition;
            }
            else
            {
                throw new NotInitializedException();
            }
        }

        public int ActualIndexInColumn()
        {
            if (_initialized)
            {
                return _columnPosition;
            }
            else
            {
                throw new NotInitializedException();
            }
        }

        //-----------------------------------------------------------------------

        public void InsertColumnInModel(Column Column)
        {
            throw new NotImplementedException();
        }

        public void InsertCellINColumn(Cell Cell)
        {
            throw new NotImplementedException();
        }

        //-----------------------------------------------------------------------

        public void RemoveColumn()
        {
            throw new NotImplementedException();
        }

        public void RemoveCell()
        {
            throw new NotImplementedException();
        }


    }

    class StubCellsIterator : CellsIterator
    {
        public bool HasNextInColumn()
        {
            return false;
        }

        public bool HasNextInRow()
        {
            return false;
        }

        public bool HasPreviousInRow()
        {
            return false;
        }

        public bool HasPreviousInColumn()
        {
            return false;
        }


        public Cell NextInRow()
        {
            throw new NotImplementedException();
        }

        public Cell NextInColumn()
        {
            throw new NotImplementedException();
        }

        public Cell PreviousInRow()
        {
            throw new NotImplementedException();
        }

        public Cell PreviousInColumn()
        {
            throw new NotImplementedException();
        }


        public int ActualIndexInRow()
        {
            throw new NotImplementedException();
        }

        public int ActualIndexInColumn()
        {
            throw new NotImplementedException();
        }
    }
}
