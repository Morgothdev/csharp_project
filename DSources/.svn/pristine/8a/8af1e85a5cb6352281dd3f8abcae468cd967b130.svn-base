using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;

namespace DSources.Data
{
    [SerializableAttribute]
    public class Cell : ICloneable 
    {
        [DefaultValue(null)]
        public virtual Object Value { get; set; }

        public Cell() { }

        public Cell(Object value)
        {
            Value = value;
        }

        public object CloneCell()
        {
            using (var ms = new MemoryStream())
            {
                var formatter = new BinaryFormatter();
                formatter.Serialize(ms, this);
                ms.Position = 0;
                return (Cell)formatter.Deserialize(ms);
            }
        }

        public override bool Equals(object obj)
        {
            Console.WriteLine(obj);
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            Console.WriteLine(obj);
            Cell another = (Cell)obj;
            
            if (another == null)
            {
                return false;
            }

            if (!another.Value.Equals(this.Value))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }


        public object Clone()
        {
            return CloneCell();
        }
    }
}
