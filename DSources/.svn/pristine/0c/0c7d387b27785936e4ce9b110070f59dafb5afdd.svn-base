using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NMock2;
using System.Collections.Generic;

namespace DSources.Data
{
    [TestClass]
    public class DataModelTest
    {
        Mockery mockery;
        DataModel tested;

        [TestInitialize]
        public void SetUp()
        {
            mockery = new Mockery();
            tested = new DataModel();
        }

        [TestCleanup]
        public void CleanUp()
        {
            mockery.VerifyAllExpectationsHaveBeenMet();
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestColumnCountIsZero()
        {
            //nic nie wstawiamy
            Assert.AreEqual(0, tested.GetColumnsCount());
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestColumnCountIsNonZero()
        {
            List<Column> columns = new List<Column>();
            columns.Add((Column)mockery.NewMock(typeof(Column)));
            columns.Add((Column)mockery.NewMock(typeof(Column)));
            tested.AddColumnsAtBegin(columns);
            Assert.AreEqual(tested.GetColumnsCount(), 2);
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestAddingColumnAtEnd()
        {
            Column wartownik = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(wartownik).GetProperty("Name").Will(Return.Value("wartownik"));
            Expect.AtMost(100).On(wartownik).Method("Equals").With(wartownik).Will(Return.Value(true));
            List<Column> one = new List<Column>();
            one.Add(wartownik);
            tested.AddColumnsAtBegin(one);
            Assert.AreEqual(tested.GetColumnsCount(), 1);

            List<Column> lista = new List<Column>();

            Column pierwsza = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(pierwsza).GetProperty("Name").Will(Return.Value("one"));
            Expect.AtMost(100).On(pierwsza).Method("Equals").With(pierwsza).Will(Return.Value(true));

            Column druga = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(druga).GetProperty("Name").Will(Return.Value("second"));
            Expect.AtMost(100).On(druga).Method("Equals").With(druga).Will(Return.Value(true));

            Expect.AtMost(100).On(druga).Method("Equals").With(pierwsza).Will(Return.Value(false));
            Expect.AtMost(100).On(pierwsza).Method("Equals").With(druga).Will(Return.Value(false));
            lista.Add(pierwsza);
            lista.Add(druga);
            //Console.WriteLine(lista.IndexOf(druga) + " ");
            //Assert.AreEqual(lista.IndexOf(pierwsza), 0);
            //Assert.AreEqual(lista.IndexOf(druga), 1);
            tested.AddColumnsAtEnd(lista);
            Assert.AreEqual(tested.GetColumnAt(1), pierwsza);
            Assert.AreEqual(tested.GetColumnAt(2), druga);
            Assert.AreEqual(tested.GetColumnAt(0), wartownik);
            Assert.AreEqual(tested.GetColumnsCount(), 3);
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestAddingColumnsAtBegin()
        {
            Column wartownik = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(wartownik).GetProperty("Name").Will(Return.Value("wartownik"));
            Expect.AtMost(100).On(wartownik).Method("Equals").With(wartownik).Will(Return.Value(true));
            List<Column> one = new List<Column>();
            one.Add(wartownik);
            tested.AddColumnsAtBegin(one);
            Assert.AreEqual(tested.GetColumnsCount(), 1);

            List<Column> lista = new List<Column>();

            Column pierwsza = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(pierwsza).GetProperty("Name").Will(Return.Value("one"));
            Expect.AtMost(100).On(pierwsza).Method("Equals").With(pierwsza).Will(Return.Value(true));

            Column druga = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(druga).GetProperty("Name").Will(Return.Value("second"));
            Expect.AtMost(100).On(druga).Method("Equals").With(druga).Will(Return.Value(true));

            Expect.AtMost(100).On(druga).Method("Equals").With(pierwsza).Will(Return.Value(false));
            Expect.AtMost(100).On(pierwsza).Method("Equals").With(druga).Will(Return.Value(false));
            lista.Add(pierwsza);
            lista.Add(druga);
            //Console.WriteLine(lista.IndexOf(druga) + " ");
            //Assert.AreEqual(lista.IndexOf(pierwsza), 0);
            //Assert.AreEqual(lista.IndexOf(druga), 1);
            tested.AddColumnsAtBegin(lista);
            Assert.AreEqual(tested.GetColumnAt(0), pierwsza);
            Assert.AreEqual(tested.GetColumnAt(1), druga);
            Assert.AreEqual(tested.GetColumnAt(2), wartownik);
            Assert.AreEqual(tested.GetColumnsCount(), 3);
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestAddingColumnsInside()
        {
            Column wartownikPierwszy = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(wartownikPierwszy).GetProperty("Name").Will(Return.Value("wartownik"));
            Expect.AtMost(100).On(wartownikPierwszy).Method("Equals").With(wartownikPierwszy).Will(Return.Value(true));
            List<Column> w1 = new List<Column>();
            w1.Add(wartownikPierwszy);
            tested.AddColumnsAtBegin(w1);
            Assert.AreEqual(tested.GetColumnsCount(), 1);

            Column wartownikDrugi = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(wartownikDrugi).GetProperty("Name").Will(Return.Value("wartownik2"));
            Expect.AtMost(100).On(wartownikDrugi).Method("Equals").With(wartownikDrugi).Will(Return.Value(true));
            List<Column> w2 = new List<Column>();
            w2.Add(wartownikDrugi);
            tested.AddColumnsAtEnd(w2);
            Assert.AreEqual(tested.GetColumnsCount(), 2);
            Assert.AreEqual(tested.GetColumnAt(0), wartownikPierwszy);
            Assert.AreEqual(tested.GetColumnAt(1), wartownikDrugi);

            List<Column> lista = new List<Column>();

            Column pierwsza = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(pierwsza).GetProperty("Name").Will(Return.Value("one"));
            Expect.AtMost(100).On(pierwsza).Method("Equals").With(pierwsza).Will(Return.Value(true));

            Column druga = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(druga).GetProperty("Name").Will(Return.Value("second"));
            Expect.AtMost(100).On(druga).Method("Equals").With(druga).Will(Return.Value(true));

            Expect.AtMost(100).On(druga).Method("Equals").With(pierwsza).Will(Return.Value(false));
            Expect.AtMost(100).On(pierwsza).Method("Equals").With(druga).Will(Return.Value(false));
            lista.Add(pierwsza);
            lista.Add(druga);
            //Console.WriteLine(lista.IndexOf(druga) + " ");
            //Assert.AreEqual(lista.IndexOf(pierwsza), 0);
            //Assert.AreEqual(lista.IndexOf(druga), 1);
            tested.AddColumnsInside(1, lista);
            Assert.AreEqual(tested.GetColumnAt(0), wartownikPierwszy);
            Assert.AreEqual(tested.GetColumnAt(1), pierwsza);
            Assert.AreEqual(tested.GetColumnAt(2), druga);
            Assert.AreEqual(tested.GetColumnAt(3), wartownikDrugi);

            Assert.AreEqual(tested.GetColumnsCount(), 4);
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestColumnsIteratorIsNotNull()
        {
            Assert.IsNotNull(tested.ColumnsIterator());
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestColumnsIteratorIsStubIfIsNoColumn()
        {
            Assert.IsNotNull(tested.ColumnsIterator());
            Assert.IsFalse(tested.ColumnsIterator().MoveNext());
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Not implemented")]
        public void TestColumnsIteratorReturningAllColumns()
        {
            List<Column> lista = new List<Column>();

            Column pierwsza = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(pierwsza).GetProperty("Name").Will(Return.Value("one"));
            Expect.AtMost(100).On(pierwsza).Method("Equals").With(pierwsza).Will(Return.Value(true));

            Column druga = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(druga).GetProperty("Name").Will(Return.Value("second"));
            Expect.AtMost(100).On(druga).Method("Equals").With(druga).Will(Return.Value(true));

            Column trzecia = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(trzecia).GetProperty("Name").Will(Return.Value("second"));
            Expect.AtMost(100).On(trzecia).Method("Equals").With(trzecia).Will(Return.Value(true));

            lista.Add(pierwsza);
            lista.Add(druga);
            lista.Add(trzecia);
            
            IEnumerator<Column> it = tested.ColumnsIterator();
            Assert.AreEqual(it.Current, pierwsza);


            Assert.Inconclusive("Not implemented");
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Not implemented")]
        public void TestSplitFromInsideToInside()
        {
            Assert.Inconclusive("Not implemented");
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Not implemented")]
        public void TestSplitFromBegToInside()
        {
            Assert.Inconclusive("Not implemented");
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Not implemented")]
        public void TestSplitFromInsideToEnd()
        {
            Assert.Inconclusive("Not implemented");
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Not implemented")]
        [TestCategory("DEPENDED")]
        public void TestCloning()
        {
            Assert.Inconclusive("Not implemented");
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Not implemented")]
        public void TestCellsIteratorIsNotNull()
        {
            Assert.Inconclusive("Not implemented");
        }


    }
}
