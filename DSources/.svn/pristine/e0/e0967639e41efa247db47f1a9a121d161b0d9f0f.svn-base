using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NMock2;
using System.Linq;
using System.Collections.Generic;

namespace DSources.Data
{
    [TestClass]
    public class DataModelTest
    {
        Mockery mockery;
        DataModel tested;
        Column pierwsza, druga, trzecia, czwarta;

        [TestInitialize]
        public void SetUp()
        {
            mockery = new Mockery();
            tested = new DataModel();
        }

        [TestCleanup]
        public void CleanUp()
        {
            mockery.VerifyAllExpectationsHaveBeenMet();
        }

        private Column CreateColumnMockWithSettedNameAndEqualsItselfWithoutCellsCount(String name)
        {
            Column column = (Column)mockery.NewMock(typeof(Column));
            Expect.AtMost(100).On(column).GetProperty("Name").Will(Return.Value(name));
            Expect.AtMost(100).On(column).Method("Equals").With(column).Will(Return.Value(true));
            return column;
        }

        private Column CreateColumnMockWithSettedNameAndEqualsItself(String name)
        {
            Column column = CreateColumnMockWithSettedNameAndEqualsItselfWithoutCellsCount(name);
            Expect.AtMost(100).On(column).GetProperty("CellsCount").Will(Return.Value(0));
            return column;
        }

        private Column CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount(string p1, int p2)
        {
            Column result = CreateColumnMockWithSettedNameAndEqualsItselfWithoutCellsCount(p1);
            Expect.AtLeastOnce.On(result).GetProperty("CellsCount").Will(Return.Value(p2));
            return result;
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestColumnCountIsZero()
        {
            //nic nie wstawiamy
            Assert.AreEqual(0, tested.ColumnsCount);
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestColumnCountIsNonZero()
        {
            List<Column> columns = new List<Column>();
            columns.Add(CreateColumnMockWithSettedNameAndEqualsItself("one"));
            columns.Add(CreateColumnMockWithSettedNameAndEqualsItself("second"));
            tested.AddColumnsAtBegin(columns);
            Assert.AreEqual(tested.ColumnsCount, 2);
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestAddingColumnAtEnd()
        {
            Column wartownik = CreateColumnMockWithSettedNameAndEqualsItself("wartownik");
            List<Column> one = new List<Column>();
            one.Add(wartownik);
            tested.AddColumnsAtBegin(one);
           
            Assert.AreEqual(tested.ColumnsCount, 1);

            List<Column> lista = new List<Column>();

            Column pierwsza = CreateColumnMockWithSettedNameAndEqualsItself("one");
            Column druga = CreateColumnMockWithSettedNameAndEqualsItself("second");

            Expect.AtMost(100).On(druga).Method("Equals").With(pierwsza).Will(Return.Value(false));
            Expect.AtMost(100).On(pierwsza).Method("Equals").With(druga).Will(Return.Value(false));
            lista.Add(pierwsza);
            lista.Add(druga);
            tested.AddColumnsAtEnd(lista);
            Assert.AreEqual(tested.ColumnAt(1), pierwsza);
            Assert.AreEqual(tested.ColumnAt(2), druga);
            Assert.AreEqual(tested.ColumnAt(0), wartownik);
            Assert.AreEqual(tested.ColumnsCount, 3);
        }

        //[TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Not implemented")]
        public void TestAddingInvalidColumnAtEnd()
        {
            Column wartownik = CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount("wartownik",3);
            List<Column> one = new List<Column>();
            one.Add(wartownik);
            tested.AddColumnsAtBegin(one);
            
            Assert.AreEqual(tested.ColumnsCount, 1);

            List<Column> lista = new List<Column>();

            Column pierwsza = CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount("one",3);
            Column druga = CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount("second",5);

            Expect.AtMost(100).On(druga).Method("Equals").With(pierwsza).Will(Return.Value(false));
            Expect.AtMost(100).On(pierwsza).Method("Equals").With(druga).Will(Return.Value(false));
            
            lista.Add(pierwsza);
            lista.Add(druga);
            try
            {
                tested.AddColumnsAtEnd(lista);
            }
            catch (ArgumentException)
            {
                Assert.AreEqual(tested.ColumnsCount, 1);
                return;
            }
            Assert.Fail();
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestAddingColumnsAtBegin()
        {
            Column wartownik = CreateColumnMockWithSettedNameAndEqualsItself("wartownik");
            List<Column> one = new List<Column>();
            one.Add(wartownik);
            tested.AddColumnsAtBegin(one);
            Assert.AreEqual(tested.ColumnsCount, 1);

            List<Column> lista = new List<Column>();

            Column pierwsza = CreateColumnMockWithSettedNameAndEqualsItself("one");
            Column druga = CreateColumnMockWithSettedNameAndEqualsItself("second");

            Expect.AtMost(100).On(druga).Method("Equals").With(pierwsza).Will(Return.Value(false));
            Expect.AtMost(100).On(pierwsza).Method("Equals").With(druga).Will(Return.Value(false));
            lista.Add(pierwsza);
            lista.Add(druga);

            tested.AddColumnsAtBegin(lista);
            Assert.AreEqual(tested.ColumnAt(0), pierwsza);
            Assert.AreEqual(tested.ColumnAt(1), druga);
            Assert.AreEqual(tested.ColumnAt(2), wartownik);
            Assert.AreEqual(tested.ColumnsCount, 3);
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestRowsCount()
        {
            List<Column> one = new List<Column>();

            Column wartownik = CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount("wartownik", 5);
            
            one.Add(wartownik);
            
            tested.AddColumnsAtBegin(one);
            
            Assert.AreEqual(tested.RowsCount, 5);
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestAddingInvalidColumnsAtBegin()
        {
            Column wartownik = CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount("wartownik", 3);
            List<Column> one = new List<Column>();
            one.Add(wartownik);
            tested.AddColumnsAtBegin(one);

            Assert.AreEqual(tested.ColumnsCount, 1);

            List<Column> lista = new List<Column>();

            Column pierwsza = CreateColumnMockWithSettedNameAndEqualsItselfWithoutCellsCount("one");
            Expect.AtLeastOnce.On(pierwsza).GetProperty("CellsCount").Will(Return.Value(3));
            Column druga = CreateColumnMockWithSettedNameAndEqualsItselfWithoutCellsCount("second");
            Expect.AtLeastOnce.On(druga).GetProperty("CellsCount").Will(Return.Value(5));

            lista.Add(pierwsza);
            lista.Add(druga);
            try
            {
                tested.AddColumnsAtBegin(lista);
            }
            catch (ArgumentException)
            {
                Assert.AreEqual(tested.ColumnsCount, 1);
                return;
            }
            Assert.Fail();
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestAddingColumnsInside()
        {
            Column wartownikPierwszy = CreateColumnMockWithSettedNameAndEqualsItself("wartownik1");
            List<Column> w1 = new List<Column>();
            w1.Add(wartownikPierwszy);
            tested.AddColumnsAtBegin(w1);
            Assert.AreEqual(tested.ColumnsCount, 1);

            Column wartownikDrugi = CreateColumnMockWithSettedNameAndEqualsItself("wartownik2");

            List<Column> w2 = new List<Column>();
            w2.Add(wartownikDrugi);
            tested.AddColumnsAtEnd(w2);
            Assert.AreEqual(tested.ColumnsCount, 2);
            Assert.AreEqual(tested.ColumnAt(0), wartownikPierwszy);
            Assert.AreEqual(tested.ColumnAt(1), wartownikDrugi);

            List<Column> lista = new List<Column>();

            Column pierwsza = CreateColumnMockWithSettedNameAndEqualsItself("one");
            Column druga = CreateColumnMockWithSettedNameAndEqualsItself("second");

            Expect.AtMost(100).On(druga).Method("Equals").With(pierwsza).Will(Return.Value(false));
            Expect.AtMost(100).On(pierwsza).Method("Equals").With(druga).Will(Return.Value(false));
            lista.Add(pierwsza);
            lista.Add(druga);

            tested.AddColumnsAtIndex(1, lista);
            Assert.AreEqual(tested.ColumnAt(0), wartownikPierwszy);
            Assert.AreEqual(tested.ColumnAt(1), pierwsza);
            Assert.AreEqual(tested.ColumnAt(2), druga);
            Assert.AreEqual(tested.ColumnAt(3), wartownikDrugi);

            Assert.AreEqual(tested.ColumnsCount, 4);
        }



        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestAddingInvalidColumnsInside()
        {
            Column wartownikPierwszy = CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount("wartownik1", 3);
            List<Column> w1 = new List<Column>();
            w1.Add(wartownikPierwszy);
            tested.AddColumnsAtBegin(w1);
            Assert.AreEqual(tested.ColumnsCount, 1);

            Column wartownikDrugi = CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount("wartownik2",3);
            List<Column> w2 = new List<Column>();
            w2.Add(wartownikDrugi);
            tested.AddColumnsAtEnd(w2);

            Assert.AreEqual(tested.ColumnsCount, 2);
            Assert.AreEqual(tested.ColumnAt(0), wartownikPierwszy);
            Assert.AreEqual(tested.ColumnAt(1), wartownikDrugi);

            List<Column> lista = new List<Column>();

            Column pierwsza = CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount("one",3);
            Column druga = CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount("second",5);


            lista.Add(pierwsza);
            lista.Add(druga);
            try
            {
                tested.AddColumnsAtIndex(1,lista);
            }
            catch (ArgumentException)
            {
                Assert.AreEqual(tested.ColumnsCount, 2);
                return;
            }
            Assert.Fail();
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestColumnsIteratorIsNotNull()
        {
            Assert.IsNotNull(tested.ColumnsIterator());
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestColumnsIteratorIsStubIfIsNoColumn()
        {
            Assert.IsNotNull(tested.ColumnsIterator());
            Assert.IsFalse(tested.ColumnsIterator().MoveNext());
        }

        private void FillTestedWithColumns(int count)
        {
            List<Column> lista = new List<Column>();

            if (count > 0)
            {
                pierwsza = CreateColumnMockWithSettedNameAndEqualsItself("one");
                lista.Add(pierwsza);
            }
            if (count > 1)
            {
                druga = CreateColumnMockWithSettedNameAndEqualsItself("second");
                lista.Add(druga);
            }
            if (count > 2)
            {
                trzecia = CreateColumnMockWithSettedNameAndEqualsItself("three");
                lista.Add(trzecia);
            }
            if (count > 3)
            {
                czwarta = CreateColumnMockWithSettedNameAndEqualsItself("four");
                lista.Add(czwarta);
            }
            tested.AddColumnsAtBegin(lista);
        }


        private void FillTestedWithColumnsWithoutCellsCount(int count)
        {
            List<Column> lista = new List<Column>();

            if (count > 0)
            {
                pierwsza = CreateColumnMockWithSettedNameAndEqualsItselfWithoutCellsCount("one");
                lista.Add(pierwsza);
            }
            if (count > 1)
            {
                druga = CreateColumnMockWithSettedNameAndEqualsItselfWithoutCellsCount("second");
                lista.Add(druga);
            }
            if (count > 2)
            {
                trzecia = CreateColumnMockWithSettedNameAndEqualsItselfWithoutCellsCount("three");
                lista.Add(trzecia);
            }
            if (count > 3)
            {
                czwarta = CreateColumnMockWithSettedNameAndEqualsItselfWithoutCellsCount("four");
                lista.Add(czwarta);
            }
            tested.AddColumnsAtBegin(lista);
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestColumnsIteratorReturningAllColumns()
        {
            FillTestedWithColumns(3);

            IEnumerator<Column> it = tested.ColumnsIterator();
            it.MoveNext();
            Assert.AreEqual(it.Current, pierwsza);
            it.MoveNext();
            Assert.AreEqual(it.Current, druga);
            it.MoveNext();
            Assert.AreEqual(it.Current, trzecia);
            Assert.IsFalse(it.MoveNext());
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestSplitFromInsideToInside()
        {
            FillTestedWithColumns(4);

            List<Column> splitted = tested.Slice(1, 3);

            Assert.IsTrue(splitted.Count == 2);
            Assert.AreEqual(splitted.ElementAt(0), druga);
            Assert.AreEqual(splitted.ElementAt(1), trzecia);
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestSplitFromBegToInside()
        {
            FillTestedWithColumns(4);

            List<Column> splitted = tested.Slice(-3);

            Assert.IsTrue(splitted.SequenceEqual(tested.Slice(0, 3)));

            Assert.IsTrue(splitted.Count == 3);
            Assert.AreEqual(splitted.ElementAt(0), pierwsza);
            Assert.AreEqual(splitted.ElementAt(1), druga);
            Assert.AreEqual(splitted.ElementAt(2), trzecia);
        }


        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestSplitFromInsideToEnd()
        {
            FillTestedWithColumns(4);

            List<Column> splitted = tested.Slice(2);

            Assert.IsTrue(splitted.SequenceEqual(tested.Slice(2, 0)));

            Assert.IsTrue(splitted.Count == 2);
            Assert.AreEqual(splitted.ElementAt(0), trzecia);
            Assert.AreEqual(splitted.ElementAt(1), czwarta);
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        [TestCategory("DEPENDED")]
        public void TestCloning()
        {
            List<Column> columnsList = new List<Column>();

            Column c1 = new Column(new List<Cell>(), "test1", Column.ObjectsType.Date, Column.Role.Dimension);
            Column c2 = new Column(new List<Cell>(), "test2", Column.ObjectsType.Date, Column.Role.Dimension);
            Column c3 = new Column(new List<Cell>(), "test3", Column.ObjectsType.Date, Column.Role.Dimension);

            columnsList.Add(c1);
            columnsList.Add(c2);
            columnsList.Add(c3);

            tested = new DataModel();
            tested.AddColumnsAtBegin(columnsList);

            DataModel cloned = tested.CloneModel();

            Assert.AreEqual(cloned, tested);
            Assert.AreNotSame(tested, cloned);
        }

        Cell CreateMockedCell(object value)
        {
            Cell result = (Cell)mockery.NewMock(typeof(Cell));
            Expect.AtMost(10000).On(result).GetProperty("Value").Will(Return.Value(value));
            Expect.AtMost(10000).On(result).Method("Equals").With(result).Will(Return.Value(true));

            return result;
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestAddValidRecordAtIndex()
        {
            FillTestedWithColumns(2);

            List<Cell> record = new List<Cell>();
            Cell cell1 = CreateMockedCell(34);
            Cell cell2 = CreateMockedCell(50);
            record.Add(cell1);
            record.Add(cell2);

            Expect.On(pierwsza).Method("AddCellAtIndex").With(1,cell1);
            Expect.On(druga).Method("AddCellAtIndex").With(1,cell2);

            tested.InsertRecordAtIndex(1, record);        
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestAddInvalidRecordAtIndex()
        {
            FillTestedWithColumns(2);

            List<Cell> record = new List<Cell>();
            Cell cell1 = CreateMockedCell(34);
            Cell cell2 = CreateMockedCell(50);
            record.Add(cell1);

            Expect.Never.On(pierwsza).Method("AddCellAtIndex").With(1, cell1);
            try
            {
                tested.InsertRecordAtIndex(1, record);
            }
            catch (ArgumentException)
            {
                Assert.IsTrue(true);
                return;
            }
            Assert.Fail();
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestAddValidRecord()
        {
            List<Cell> record = new List<Cell>();
            List<Column> lista = new List<Column>();
            
            Cell cell1 = CreateMockedCell(34);
            Cell cell2 = CreateMockedCell(50);
            
            pierwsza = CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount("one",2);
            Expect.On(pierwsza).Method("AddCellAtIndex").With(2, cell1);

            druga = CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount("second",2);
            Expect.On(druga).Method("AddCellAtIndex").With(2, cell2);

            lista.Add(pierwsza);
            lista.Add(druga);
                       
            record.Add(cell1);
            record.Add(cell2);

            tested.AddColumnsAtBegin(lista);
            tested.InsertRecord(record);       
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestAddInvalidRecord()
        {
            FillTestedWithColumns(2);

            List<Cell> record = new List<Cell>();
            Cell cell1 = CreateMockedCell(34);
            record.Add(cell1);

            Expect.Never.On(pierwsza).Method("AddCellAtIndex").With(1, cell1);
            Expect.Never.On(pierwsza).GetProperty("CellsCount");
            try
            {
                tested.InsertRecord(record);
            }
            catch (ArgumentException)
            {
                Assert.IsTrue(true);
                return;
            }
            Assert.Fail();
        }

        [TestMethod]
        [TestCategory("DataModel")]
        [TestCategory("Implemented")]
        public void TestRemoveRecord()
        {
            List<Column> lista = new List<Column>();

            pierwsza = CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount("one", 5);
            Expect.On(pierwsza).Method("RemoveCellAtIndex").With(2);

            druga = CreateColumnMockWithSettedNameAndEqualsItselfWithCellsCount("second", 5);
            Expect.On(druga).Method("RemoveCellAtIndex").With(2);

            lista.Add(pierwsza);
            lista.Add(druga);

            tested.AddColumnsAtBegin(lista);
            tested.RemoveRecord(2);    
        }


    }
}
