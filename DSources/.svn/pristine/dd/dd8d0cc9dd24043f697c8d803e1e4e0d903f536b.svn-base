using DSources.Parsers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace DSources.Logic
{
    public class ParsersLoader
    {
        public ICollection<Parser> LoadParsers(ICollection<MyType> TypesCollection)
        {
           IList<Parser> loaded = new List<Parser>();
            foreach(MyType type in TypesCollection){
                if ( type.IsAbstract==false){
                    loaded.Add((Parser) type.DefaultConstructor.Invoke());
                }
            }
            return loaded;
        }
    }





    public class MyType
    {
        public virtual Type DecoratedType
        {
            get;
            set;
        }

        public MyType(Type TypeToDecore)
        {
            this.DecoratedType = TypeToDecore;
            this.DefaultConstructor = new MyConstructor(TypeToDecore.GetConstructor(Type.EmptyTypes));
        }

        public MyType() { }

        public virtual bool IsAbstract
        {
            get { return DecoratedType.IsAbstract; }
        }

        public virtual MyConstructor DefaultConstructor
        {
            get;
            set;
        }
    }

    public class MyConstructor
    {
        public MyConstructor(ConstructorInfo constructorInfo)
        {
            this.DecoratedConstructor = constructorInfo;
        }

        public MyConstructor() { }

        public virtual ConstructorInfo DecoratedConstructor
        {
            get;
            set;
        }

        public virtual Object Invoke()
        {
            return DecoratedConstructor.Invoke(Type.EmptyTypes);
        }
    }
}
