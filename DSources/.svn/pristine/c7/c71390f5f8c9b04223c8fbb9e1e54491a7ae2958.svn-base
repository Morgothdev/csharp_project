using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NMock2;
using System.Collections.Generic;

namespace DSources.Data
{
    [TestClass]
    public class ColumnTest
    {
        Mockery mockery;
        String columnName = "test";

        [TestInitialize]
        public void SetUp(){
            mockery = new Mockery();
        }

        [TestCleanup]
        public void CleanUp(){
            mockery.VerifyAllExpectationsHaveBeenMet();
        }

        
        Cell CreateMockedCell(object value){
            Cell result = (Cell)mockery.NewMock(typeof(Cell));
            Expect.AtMost(10000).On(result).GetProperty("Value").Will(Return.Value(value));
            Expect.AtMost(10000).On(result).Method("Equals").With(result).Will(Return.Value(true));
            
            return result;
        }

        [TestMethod]
        [TestCategory("Column")]
        [TestCategory("Implemented")]
        public void TestEqualsColumns()
        {
            Column.ObjectsType type = Column.ObjectsType.Number;
            Column.Role role = Column.Role.Dimension;
            Object o1 = 45;
            Object o2 = 20;
            Cell c1 = CreateMockedCell(o1);
            Cell c2 = CreateMockedCell(o2);
            Expect.AtMost(10000).On(c1).Method("Equals").With(c2).Will(Return.Value(false));
            Expect.AtMost(10000).On(c2).Method("Equals").With(c1).Will(Return.Value(false));
            List<Cell> cells1 = new List<Cell>();
            List<Cell> cells2 = new List<Cell>();
            cells1.Add(c1);
            cells1.Add(c2);
            cells2.Add(c1);
            cells2.Add(c2);
            Column col1 = new Column(cells1, columnName, type, role);
            Column col2 = new Column(cells2, columnName, type, role);

            Assert.AreEqual(col1, col2);
            Assert.AreNotSame(col1, col2);
        }

        [TestMethod]
        [TestCategory("Column")]
        [TestCategory("Implemented")]
        public void TestNotEqualsColumnsViaCells()
        {
            Object o1 = 45;

            Cell c1 = CreateMockedCell(o1);

            List<Cell> cells1 = new List<Cell>();
            List<Cell> cells2 = new List<Cell>();
            cells1.Add(c1);

            Column col1 = null; col1 = new Column(cells2, columnName, Column.ObjectsType.Number, Column.Role.Dimension);

            Column col2 = null; col2 = new Column(cells1, columnName, Column.ObjectsType.Number, Column.Role.Dimension);

            Assert.AreNotEqual(col1, col2);
            Assert.AreNotSame(col1, col2);
        }

        [TestMethod]
        [TestCategory("Column")]
        [TestCategory("Implemented")]
        public void TestNotEqualsColumnsViaObjectsType()
        {
            Object o1 = 45;

            Cell c1 = CreateMockedCell(o1);

            List<Cell> cells1 = new List<Cell>();
            cells1.Add(c1);

            Column col1 = null; col1 = new Column(cells1, columnName, Column.ObjectsType.Text, Column.Role.Dimension);

            Column col2 = null; col2 = new Column(cells1, columnName, Column.ObjectsType.Number, Column.Role.Dimension);

            Assert.AreNotEqual(col1, col2);
            Assert.AreNotSame(col1, col2);
        }


        [TestMethod]
        [TestCategory("Column")]
        [TestCategory("Implemented")]
        public void TestNotEqualsColumnsViaRole()
        {
            Cell c1 = CreateMockedCell(45);

            List<Cell> cells1 = new List<Cell>();
            cells1.Add(c1);

            Column col1 = null; col1 = new Column(cells1, columnName, Column.ObjectsType.Number, Column.Role.Fact);

            Column col2 = null; col2 = new Column(cells1, columnName, Column.ObjectsType.Number, Column.Role.Dimension);

            Assert.AreNotEqual(col1, col2);
            Assert.AreNotSame(col1, col2);
        }

        [TestMethod]
        [TestCategory("Column")]
        [TestCategory("Implemented")]
        [TestCategory("DEPENDED")]
        public void TestCloningColumns()
        {
            List<Cell> cellsList = new List<Cell>();

            Cell c1 = new Cell( 34 );
            Cell c2 = new Cell( 50 );
            Cell c3 = new Cell(60);
            cellsList.Add(c1);
            cellsList.Add(c2);
            cellsList.Add(c3);

            Column tested = new Column(cellsList, columnName, Column.ObjectsType.Number, Column.Role.Dimension);
            Column cloned = (Column)tested.Clone();

            Assert.AreEqual(cloned, tested);
            Assert.AreNotSame(tested, cloned);
        }

        [TestMethod]
        [TestCategory("Column")]
        [TestCategory("Implemented")]
        public void TestColumnsIteratorNotNull()
        {
            List<Cell> cells = new List<Cell>();
            Column tested = new Column(cells, columnName, Column.ObjectsType.Number, Column.Role.Dimension);
            IEnumerator<Cell> it = tested.CellsIterator();
            Assert.IsNotNull(it);
            Assert.IsFalse(it.MoveNext());
        }

        [TestMethod]
        [TestCategory("Column")]
        [TestCategory("Implemented")]
        public void TestColumnsConstructorSettingAllProperies()
        {
            Cell c1 = CreateMockedCell(43);
            List<Cell> cells = new List<Cell>();
            cells.Add(c1);

            Column.ObjectsType type = Column.ObjectsType.Number;
            Column.Role role = Column.Role.Fact;
            Column tested = new Column(cells, columnName, type, role);
            Assert.AreEqual(tested.ObjectsTypeInColumn, type);
            Assert.AreEqual(tested.RoleOfColumn, role);
            Assert.AreEqual(tested.Name, columnName);

            List<Cell> resultedCell = new List<Cell>();

            
            for (IEnumerator<Cell> it = tested.CellsIterator(); it.MoveNext(); )
            {
                resultedCell.Add(it.Current);
            }
            Assert.IsTrue(resultedCell.Count == 1);
            Assert.IsTrue(resultedCell.Contains(c1));
        }

        [TestMethod]
        [TestCategory("Column")]
        [TestCategory("Implemented")]
        public void TestNullReferenceExceptionOnNullAsCellsInConstructor()
        {
            try
            {
                new Column(null, columnName, Column.ObjectsType.Number, Column.Role.Dimension);
            }
            catch (NullReferenceException)
            {
                Assert.IsTrue(true);
                return;
            }
            Assert.Fail();
        }
        [TestMethod]
        [TestCategory("Column")]
        [TestCategory("Implemented")]
        public void TestNullReferenceExceptionOnNullAsNameInConstructor()
        {
            try
            {
                new Column(new List<Cell>(), null, Column.ObjectsType.Number, Column.Role.Dimension);
            }
            catch (NullReferenceException)
            {
                Assert.IsTrue(true);
                return;
            }
            Assert.Fail();
        }
    }
}
