using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NMock2;
using System.Reflection;
using System.Collections.Generic;
using DSources.Parsers;


namespace DSources.Logic
{
    [TestClass]
    public class ParserManagerTest
    {

        InternalParser CreateMockedParser(Mockery mockery, String Name, out ParserInfo mockInfo1)
        {
            ParserArgumentInfo inf = (ParserArgumentInfo)mockery.NewMock(typeof(ParserArgumentInfo), "ala", ArgType.Text, "test");
            ICollection<ParserArgumentInfo> arguments = new List<ParserArgumentInfo>();
            arguments.Add(inf);

            mockInfo1 = (ParserInfo)mockery.NewMock(typeof(ParserInfo));
            Expect.On(mockInfo1).Method("GetNecessaryArgumentsAsCollection").Will(Return.Value(arguments));
            Expect.On(mockInfo1).GetProperty("ParserName").Will(Return.Value(Name));

            InternalParser p1 = (InternalParser)mockery.NewMock(typeof(InternalParser));
            Expect.On(p1).GetProperty("Arguments").Will(Return.Value(mockInfo1));

            return p1;
        }


        InternalParser CreateMockedParserWWW(Mockery mockery, String Name, out ParserInfo mockInfo1)
        {
            ParserArgumentInfo inf = (ParserArgumentInfo)mockery.NewMock(typeof(ParserArgumentInfo), "ala", ArgType.Text, "test");
            ICollection<ParserArgumentInfo> arguments = new List<ParserArgumentInfo>();
            arguments.Add(inf);

            mockInfo1 = (ParserInfo)mockery.NewMock(typeof(ParserInfo));
            Expect.On(mockInfo1).GetProperty("ParserName").Will(Return.Value(Name));

            InternalParser p1 = (InternalParser)mockery.NewMock(typeof(InternalParser));
            Expect.On(p1).GetProperty("Arguments").Will(Return.Value(mockInfo1));

            return p1;
        }

        [TestMethod]
        [TestCategory("ParserManager")]
        [TestCategory("Implemented")]
        public void TestIfManagerIsSingleton()
        {
            ParsersManager instance = ParsersManager.Instance;
            Assert.IsNotNull(instance);
            Assert.AreEqual(instance, ParsersManager.Instance);
        }

        [TestMethod]
        [TestCategory("ParserManager")]
        [TestCategory("Implemented")]
        public void TestLoadingMoreParsersInfo()
        {
            Mockery mockery = new Mockery();

            ParserInfo mockedInfo1, mockedInfo2;
            InternalParser parserMock = CreateMockedParserWWW(mockery, "name1", out mockedInfo1);
            InternalParser parserMock2 = CreateMockedParserWWW(mockery, "name2", out mockedInfo2);

            ICollection<InternalParser> loadedParsers = new List<InternalParser>();
            loadedParsers.Add(parserMock);
            loadedParsers.Add(parserMock2);

            ParsersManager tested = ParsersManager.Instance;
            tested.AcceptParsersCollection(loadedParsers);
            Assert.IsTrue(tested.GetParsersInfo().Contains(mockedInfo1));
            Assert.IsTrue(tested.GetParsersInfo().Contains(mockedInfo2));
            mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [TestMethod]
        [TestCategory("ParserManager")]
        [TestCategory("Implemented")]
        public void TestLoadingNoParsersInfo()
        {
            Mockery mockery = new Mockery();
            ICollection<InternalParser> loadedParsers = new List<InternalParser>();
            ParsersManager tested = ParsersManager.Instance;
            tested.AcceptParsersCollection(loadedParsers);
            Assert.IsTrue(tested.GetParsersInfo().Count == 0);
            mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [TestMethod]
        [TestCategory("ParserManager")]
        [TestCategory("Implemented")]
        public void TestReturningStubParserWhenNullPointer()
        {
            ParsersManager tested = ParsersManager.Instance;
            Assert.IsTrue(tested.GetParser(null).Equals(new StubParser()));
        }

    }
}
