using DSources.Logic;
using DSources.Parsers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;



/**
 * \mainpage Struktura modułu
 * Publiczne API modułu składa się z <br>
 * <ul>
 * <li>fasady DSources.DSourcesFacade z której klient może uzysać listę dostępnych parserów jako kolekcję DSources.Parsers.ParserInfo</li>
 * <li> DSources.Logic.ParserConfiguration.Builder który buduje DSources.Logic.ParserConfiguration</li>
 * <li> DSources.Parsers.Parser który jest zwracany przez DSourcesFacade.GetParserParserConfiguration) po wywołaniu z użyciem zbudowanej konfiguracji</li>
 * </ul>
 */


namespace DSources
{
    /**
     * Fasada dla całego modułu, udostepnia klientowi listę dostępnych parserów jako kolekcję ParserInfo
     * zwraca na prośbę skonfigurowany parser.
     */
    public class DSourcesFacade
    {
        private static DSourcesFacade _instance;
        private ParsersManager _parsersManager;

        /**
         * Singleton, dostęp przez atrybut Instance
         */
        public static DSourcesFacade Instance { 
            get {
                if (_instance == null) { _instance = new DSourcesFacade(); }
                return _instance; 
            } 
        
        }
        private DSourcesFacade()
        {
            _parsersManager = ParsersManager.Instance;
            _parsersManager.Configure();
            //Console.WriteLine("DSourcesFacade configured");           
        }

        public Parser GetParser(ParserConfiguration configuration){
            string[] items = configuration._properties.Select<KeyValuePair<string, string>, string>(k => String.Join("=", k.Key, k.Value)).ToArray();
            Console.WriteLine("used configurations:\n"+String.Join("\n",items));
            return new ParserBridge { parser = _parsersManager.GetParser(configuration) };
        }

        public ParserInfo[] GetParsersInfo()
        {
            return _parsersManager.GetParsersInfo().ToArray<ParserInfo>();
        }

        public ICollection<ParserInfo> GetParsersInfoAsCollection()
        {
            return _parsersManager.GetParsersInfo();
        }
    }
}
