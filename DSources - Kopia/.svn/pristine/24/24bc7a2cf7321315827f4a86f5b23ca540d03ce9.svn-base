using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace DSources.Parsers
{
    class XMLParser : FileParser
    {
        private XName firstNestLabel = "row";
        private XName rootLabel = "data";
        private XName columnNameLabel = "column-name";
        private XName secondNestLabel = "cell";

        public override bool IsFinal { get { return true; } }

        public override bool IsValid { get { return false; } }

        public override void Init()
        {
            base.Init();
            Arguments.ParserName = "XML File Parser";
        }


        public override void ConfigureItSelf(Logic.ParserConfiguration configuration)
        {
            base.ConfigureItSelf(configuration);
        }

        public Stream GenerateStreamFromString(string s)
        {
            MemoryStream stream = new MemoryStream();
            StreamWriter writer = new StreamWriter(stream);
            writer.Write(s);
            writer.Flush();
            stream.Position = 0;
            return stream;
        }

        internal override string[] SplitFirstNest(string Data)
        {
            XDocument doc = XDocument.Load(GenerateStreamFromString(Data));
            XElement[] elements = doc.Element(rootLabel).Elements(firstNestLabel).ToArray();
            List<String> lines = new List<string>();
            foreach (XElement element in elements)
            {
                String line = "";
                foreach (XNode node in element.Nodes())
                {
                    line = string.Concat(line, node.ToString());
                }
                lines.Add(line);
            }
            return lines.ToArray();
        }

        internal override string[] SplitSecondNest(string line)
        {
            XDocument doc = XDocument.Load(GenerateStreamFromString(string.Concat("<temp-row>", line, "</temp-row>")));
            List<String> elements = new List<string>();
            
            XElement[] nodes = doc.Element("temp-row").Elements(columnNameLabel).ToArray();
            foreach (XElement node in nodes)
            {
                elements.Add(node.Value);
            }
            nodes = doc.Element("temp-row").Elements(secondNestLabel).ToArray();
            foreach (XElement node in nodes)
            {
                elements.Add(node.Value);
            }

            return elements.ToArray();
        }
    }
}
